<!DOCTYPE html>
<html>
<head>
    <title>UAE Holdings - Share Investment Ledger</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        .portfolio-summary {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .summary-item {
            text-align: center;
            padding: 10px;
        }
        .summary-label {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 5px;
        }
        .summary-value {
            font-size: 1.2em;
            font-weight: bold;
        }
        .sortable {
            cursor: pointer;
        }
        .sortable:hover {
            background-color: #f8f9fa;
        }
        .sort-icon {
            margin-left: 5px;
        }
        @media print {
            .no-print {
                display: none !important;
            }
            .table td, .table th {
                padding: 0.5rem;
                font-size: 12px;
            }
            .portfolio-summary {
                page-break-inside: avoid;
            }
            .table {
                page-break-inside: auto;
            }
            tr {
                page-break-inside: avoid;
                page-break-after: auto;
            }
        }
        .stock-suggestions {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 300px;
            overflow-y: auto;
            width: calc(100% - 42px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .suggestion-item {
            padding: 10px 15px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }
        .suggestion-item:hover {
            background-color: #f8f9fa;
        }
        .suggestion-symbol {
            font-weight: bold;
            margin-right: 10px;
        }
        .suggestion-name {
            color: #666;
        }
        .suggestion-exchange {
            float: right;
            color: #999;
            font-size: 0.85em;
        }
        .suggestion-price {
            float: right;
            margin-left: 15px;
            font-weight: bold;
        }
        .selected-stock-info {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
        }
        .search-results {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
            z-index: 1000;
            display: none;
        }
        .search-result-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        .search-result-item:hover {
            background-color: #f5f5f5;
        }
        .symbol-search-container {
            position: relative;
        }
        .search-container {
            position: relative;
            margin-bottom: 15px;
        }
        .search-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .search-input:focus {
            outline: none;
            border-color: #0066cc;
            box-shadow: 0 0 0 2px rgba(0,102,204,0.2);
        }
        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }
        .search-result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .search-result-item:hover {
            background-color: #f8f9fa;
        }
        .search-result-item:last-child {
            border-bottom: none;
        }
        .stock-info {
            display: flex;
            flex-direction: column;
        }
        .stock-symbol {
            font-weight: bold;
            color: #333;
        }
        .stock-name {
            font-size: 0.9em;
            color: #666;
        }
        .stock-exchange {
            color: #888;
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    <div class="no-print">
        <%- include('partials/nav') %>
    </div>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>UAE Holdings</h2>
            <div class="no-print">
                <button class="btn btn-success me-2" onclick="window.print()">
                    <i class="bi bi-printer"></i> Print Report
                </button>
                <button class="btn btn-primary" type="button" data-bs-toggle="modal" data-bs-target="#addStockModal">
                    <i class="bi bi-plus-circle"></i> Add New Stock
                </button>
            </div>
        </div>

        <!-- Portfolio Summary -->
        <div class="portfolio-summary">
            <div class="row">
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Holdings</div>
                    <div class="summary-value"><%= holdings.length %></div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Cost</div>
                    <div class="summary-value">AED <%= holdings.reduce((sum, h) => sum + (h.quantity * h.purchase_price), 0).toFixed(2) %></div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Current Value</div>
                    <div class="summary-value">AED <%= holdings.reduce((sum, h) => sum + (h.quantity * (h.current_price || 0)), 0).toFixed(2) %></div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Profit/Loss</div>
                    <% const totalPL = holdings.reduce((sum, h) => sum + (h.quantity * ((h.current_price || 0) - h.purchase_price)), 0); %>
                    <div class="summary-value <%= totalPL >= 0 ? 'text-success' : 'text-danger' %>">
                        AED <%= totalPL.toFixed(2) %>
                    </div>
                </div>
            </div>
        </div>

        <!-- Holdings List -->
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Current Holdings</h5>
                <div class="table-responsive">
                    <table class="table" id="holdingsTable">
                        <thead>
                            <tr>
                                <th class="sortable" data-sort="stock">Stock <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="shares">Shares <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="purchase_price">Purchase Price <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="current_price">Current Price <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="total_cost">Total Cost <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="current_value">Current Value <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="profit_loss">Profit/Loss <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="purchase_date">Purchase Date <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="notes">Notes <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="no-print">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% holdings.forEach(function(holding) { %>
                                <tr>
                                    <td><%= holding.symbol %> - <%= holding.name %></td>
                                    <td><%= holding.quantity %></td>
                                    <td>AED <%= holding.purchase_price.toFixed(2) %></td>
                                    <td>AED <%= holding.current_price ? holding.current_price.toFixed(2) : 'N/A' %></td>
                                    <td>AED <%= (holding.quantity * holding.purchase_price).toFixed(2) %></td>
                                    <td>
                                        <% if (holding.current_price) { %>
                                            AED <%= (holding.quantity * holding.current_price).toFixed(2) %>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    </td>
                                    <td>
                                        <% if (holding.current_price) { %>
                                            <% const profitLoss = holding.quantity * (holding.current_price - holding.purchase_price); %>
                                            <% const profitLossPercent = ((holding.current_price - holding.purchase_price) / holding.purchase_price) * 100; %>
                                            <span class="<%= profitLoss >= 0 ? 'text-success' : 'text-danger' %>">
                                                AED <%= profitLoss.toFixed(2) %>
                                                (<%= profitLossPercent >= 0 ? '+' : '' %><%= profitLossPercent.toFixed(2) %>%)
                                            </span>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    </td>
                                    <td><%= moment(holding.purchase_date).format('YYYY-MM-DD') %></td>
                                    <td><%= holding.notes || '-' %></td>
                                    <td class="no-print">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-primary btn-sm"
                                                    onclick="openUpdateModal('<%= holding.id %>', '<%= holding.stock_id %>', <%= holding.quantity %>, <%= holding.purchase_price %>, '<%= holding.purchase_date %>', '<%= holding.notes || '' %>')">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm"
                                                    onclick="confirmDelete('<%= holding.id %>')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Stock Modal -->
    <div class="modal fade" id="addStockModal" tabindex="-1" aria-labelledby="addStockModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStockModalLabel">Add New Stock</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addStockForm">
                        <div class="mb-3">
                            <label for="symbol_search" class="form-label">Search Stock:</label>
                            <div class="search-container">
                                <input type="text" 
                                       class="form-control search-input" 
                                       id="symbol_search" 
                                       placeholder="Enter company name or symbol..."
                                       autocomplete="off"
                                       required>
                                <input type="hidden" id="selected_symbol" name="symbol" required>
                                <div id="search_results" class="search-results"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="shares" class="form-label">Number of Shares:</label>
                            <input type="number" class="form-control" id="shares" name="shares" required min="1" step="1">
                        </div>
                        <div class="mb-3">
                            <label for="purchase_price" class="form-label">Purchase Price:</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="purchase_price" name="purchase_price" required min="0.01" step="0.01">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="purchase_date" class="form-label">Purchase Date:</label>
                            <input type="date" class="form-control" id="purchase_date" name="purchase_date" required>
                        </div>
                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes:</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveStock">Save Stock</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Update Modal -->
    <div class="modal fade" id="updateModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Holding</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="updateForm" method="POST">
                        <div class="mb-3">
                            <label for="update_stock_id" class="form-label">Stock</label>
                            <select class="form-control" id="update_stock_id" name="stock_id" required>
                                <% stocks.forEach(function(stock) { %>
                                    <option value="<%= stock.id %>"><%= stock.symbol %> - <%= stock.name %></option>
                                <% }); %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="update_quantity" class="form-label">Number of Shares</label>
                            <input type="number" class="form-control" id="update_quantity" name="quantity" 
                                   min="1" step="1" required>
                        </div>
                        <div class="mb-3">
                            <label for="update_purchase_price" class="form-label">Purchase Price Per Share</label>
                            <div class="input-group">
                                <span class="input-group-text">AED</span>
                                <input type="number" class="form-control" id="update_purchase_price" 
                                       name="purchase_price" min="0.01" step="0.01" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="update_purchase_date" class="form-label">Purchase Date</label>
                            <input type="date" class="form-control" id="update_purchase_date" 
                                   name="purchase_date" required>
                        </div>
                        <div class="mb-3">
                            <label for="update_notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="update_notes" name="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" form="updateForm" class="btn btn-primary">Update</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this holding?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form id="deleteForm" method="POST" style="display: inline;">
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));

        function openUpdateModal(id, stockId, quantity, purchasePrice, purchaseDate, notes) {
            document.getElementById('update_stock_id').value = stockId;
            document.getElementById('update_quantity').value = quantity;
            document.getElementById('update_purchase_price').value = purchasePrice;
            document.getElementById('update_purchase_date').value = purchaseDate;
            document.getElementById('update_notes').value = notes;
            document.getElementById('updateForm').action = `/holdings/${id}`;
            updateModal.show();
        }

        function confirmDelete(id) {
            document.getElementById('deleteForm').action = `/holdings/${id}`;
            deleteModal.show();
        }

        // Table Sorting
        document.addEventListener('DOMContentLoaded', function() {
            const table = document.getElementById('holdingsTable');
            const headers = table.querySelectorAll('th.sortable');
            let currentSort = { column: null, direction: 'asc' };

            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const column = header.dataset.sort;
                    const direction = currentSort.column === column && currentSort.direction === 'asc' ? 'desc' : 'asc';
                    
                    // Reset all headers
                    headers.forEach(h => {
                        h.querySelector('.sort-icon').className = 'bi bi-arrow-down-up sort-icon';
                    });

                    // Update sort icon
                    header.querySelector('.sort-icon').className = `bi bi-arrow-${direction === 'asc' ? 'up' : 'down'} sort-icon`;

                    // Sort the table
                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    
                    rows.sort((a, b) => {
                        let aVal = a.children[Array.from(headers).indexOf(header)].textContent.trim();
                        let bVal = b.children[Array.from(headers).indexOf(header)].textContent.trim();

                        // Handle currency values
                        if (aVal.startsWith('AED')) {
                            aVal = parseFloat(aVal.replace(/AED|,/g, ''));
                            bVal = parseFloat(bVal.replace(/AED|,/g, ''));
                        }
                        // Handle numeric values
                        else if (!isNaN(aVal)) {
                            aVal = parseFloat(aVal);
                            bVal = parseFloat(bVal);
                        }
                        // Handle date values
                        else if (column === 'purchase_date') {
                            aVal = new Date(aVal);
                            bVal = new Date(bVal);
                        }

                        if (direction === 'asc') {
                            return aVal > bVal ? 1 : -1;
                        } else {
                            return aVal < bVal ? 1 : -1;
                        }
                    });

                    // Update the table
                    tbody.innerHTML = '';
                    rows.forEach(row => tbody.appendChild(row));

                    currentSort = { column, direction };
                });
            });
        });

        // Stock search functionality
        const symbolSearch = document.getElementById('symbol_search');
        const searchResults = document.getElementById('search_results');
        const selectedSymbol = document.getElementById('selected_symbol');
        let searchTimeout;

        symbolSearch.addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            const query = e.target.value.trim();
            
            if (query.length < 1) {
                searchResults.style.display = 'none';
                selectedSymbol.value = '';
                return;
            }
            
            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/api/search-stocks?q=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error('Search failed');
                    
                    const data = await response.json();
                    
                    if (data.length === 0) {
                        searchResults.innerHTML = '<div class="search-result-item">No results found</div>';
                    } else {
                        searchResults.innerHTML = data.map(stock => `
                            <div class="search-result-item" data-symbol="${stock.symbol}">
                                <div class="stock-info">
                                    <span class="stock-symbol">${stock.symbol}</span>
                                    <span class="stock-name">${stock.name || ''}</span>
                                </div>
                                <span class="stock-exchange">${stock.exchange}</span>
                            </div>
                        `).join('');
                    }
                    
                    searchResults.style.display = 'block';
                    
                    // Add click handlers
                    document.querySelectorAll('.search-result-item').forEach(item => {
                        if (item.dataset.symbol) {
                            item.addEventListener('click', function() {
                                const symbol = this.dataset.symbol;
                                symbolSearch.value = symbol;
                                selectedSymbol.value = symbol;
                                searchResults.style.display = 'none';
                            });
                        }
                    });
                } catch (error) {
                    console.error('Search error:', error);
                    searchResults.innerHTML = '<div class="search-result-item">Error searching stocks</div>';
                }
            }, 300);
        });

        // Hide search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!symbolSearch.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.style.display = 'none';
            }
        });

        // Form submission
        document.getElementById('saveStock').addEventListener('click', async function() {
            const form = document.getElementById('addStockForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const formData = {
                symbol: document.getElementById('selected_symbol').value,
                shares: parseInt(document.getElementById('shares').value),
                purchase_price: parseFloat(document.getElementById('purchase_price').value),
                purchase_date: document.getElementById('purchase_date').value,
                notes: document.getElementById('notes').value
            };

            try {
                const response = await fetch('/api/stocks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to add stock');
                }

                // Hide modal and reload page on success
                const modal = bootstrap.Modal.getInstance(document.getElementById('addStockModal'));
                modal.hide();
                window.location.reload();
            } catch (error) {
                console.error('Error adding stock:', error);
                alert(error.message || 'Failed to add stock. Please try again.');
            }
        });

        // Set default date to today
        document.getElementById('purchase_date').valueAsDate = new Date();

        // Clear form when modal is closed
        document.getElementById('addStockModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('addStockForm').reset();
            document.getElementById('selected_symbol').value = '';
            document.getElementById('search_results').style.display = 'none';
            document.getElementById('purchase_date').valueAsDate = new Date();
        });
    </script>
</body>
</html>
