<!DOCTYPE html>
<html>
<head>
    <title>US Stocks - Share Investment Ledger</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        .stock-suggestions {
            position: absolute;
            z-index: 1000;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            width: 100%;
        }
        .suggestion-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        .suggestion-item:hover {
            background-color: #f8f9fa;
        }
        .suggestion-details {
            font-size: 0.8em;
            color: #6c757d;
        }
        .portfolio-summary {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .summary-item {
            text-align: center;
            padding: 10px;
        }
        .summary-label {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 5px;
        }
        .summary-value {
            font-size: 1.2em;
            font-weight: bold;
        }
        .sortable {
            cursor: pointer;
        }
        .sortable:hover {
            background-color: #f8f9fa;
        }
        .sort-icon {
            margin-left: 5px;
        }
        @media print {
            .no-print {
                display: none !important;
            }
            .table td, .table th {
                padding: 0.5rem;
                font-size: 12px;
            }
            .portfolio-summary {
                page-break-inside: avoid;
            }
            .table {
                page-break-inside: auto;
            }
            tr {
                page-break-inside: avoid;
                page-break-after: auto;
            }
        }
        .search-container {
            position: relative;
            margin-bottom: 15px;
        }
        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }
        .search-result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .search-result-item:hover {
            background-color: #f8f9fa;
        }
        .search-result-item:last-child {
            border-bottom: none;
        }
        .stock-info {
            display: flex;
            flex-direction: column;
        }
        .stock-symbol {
            font-weight: bold;
            color: #333;
        }
        .stock-name {
            font-size: 0.9em;
            color: #666;
        }
        .stock-exchange {
            color: #888;
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    <div class="no-print">
        <%- include('partials/nav') %>
    </div>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>US Stocks</h2>
            <div class="no-print">
                <button class="btn btn-success me-2" onclick="window.print()">
                    <i class="bi bi-printer"></i> Print Report
                </button>
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#addStockForm">
                    <i class="bi bi-plus-circle"></i> Add New Stock
                </button>
            </div>
        </div>

        <!-- Portfolio Summary -->
        <div class="portfolio-summary">
            <div class="row">
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Cost</div>
                    <div class="summary-value">$ <%= summary.totalCost.toFixed(2) %></div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Value</div>
                    <div class="summary-value">$ <%= summary.totalValue.toFixed(2) %></div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Total Profit/Loss</div>
                    <div class="summary-value <%= summary.totalProfitLoss >= 0 ? 'text-success' : 'text-danger' %>">
                        $ <%= summary.totalProfitLoss.toFixed(2) %>
                    </div>
                </div>
                <div class="col-md-3 summary-item">
                    <div class="summary-label">Return</div>
                    <div class="summary-value <%= summary.totalProfitLossPercent >= 0 ? 'text-success' : 'text-danger' %>">
                        <%= summary.totalProfitLossPercent >= 0 ? '+' : '' %><%= summary.totalProfitLossPercent.toFixed(2) %>%
                    </div>
                </div>
            </div>
        </div>

        <!-- Stock List -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Stock List</h5>
                <div class="table-responsive">
                    <table class="table" id="stocksTable">
                        <thead>
                            <tr>
                                <th class="sortable" data-sort="symbol">Symbol <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="name">Name <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="shares">Shares <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="available_shares">Available Shares <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="purchase_price">Purchase Price <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="current_price">Current Price <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="total_cost">Total Cost <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="total_value">Total Value <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="profit_loss">Profit/Loss <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="purchase_date">Purchase Date <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="purchase_source">Purchase Source <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="sortable" data-sort="notes">Notes <i class="bi bi-arrow-down-up sort-icon"></i></th>
                                <th class="no-print">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% stocks.forEach(function(stock) { %>
                                <tr>
                                    <td><%= stock.symbol %></td>
                                    <td><%= stock.name %></td>
                                    <td><%= stock.shares %></td>
                                    <td><%= stock.available_shares %></td>
                                    <td>$ <%= stock.purchase_price ? stock.purchase_price.toFixed(2) : 'N/A' %></td>
                                    <td>$ <%= stock.current_price ? stock.current_price.toFixed(2) : 'N/A' %></td>
                                    <td>$ <%= stock.purchase_price ? (stock.shares * stock.purchase_price).toFixed(2) : 'N/A' %></td>
                                    <td>
                                        <% if (stock.current_price) { %>
                                            $ <%= (stock.shares * stock.current_price).toFixed(2) %>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    </td>
                                    <td>
                                        <% if (stock.current_price && stock.purchase_price) { %>
                                            <% const profitLoss = stock.shares * (stock.current_price - stock.purchase_price); %>
                                            <% const profitLossPercent = ((stock.current_price - stock.purchase_price) / stock.purchase_price) * 100; %>
                                            <span class="<%= profitLoss >= 0 ? 'text-success' : 'text-danger' %>">
                                                $ <%= profitLoss.toFixed(2) %>
                                                (<%= profitLossPercent >= 0 ? '+' : '' %><%= profitLossPercent.toFixed(2) %>%)
                                            </span>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    </td>
                                    <td><%= moment(stock.purchase_date).format('YYYY-MM-DD') %></td>
                                    <td><%= stock.purchase_source || '-' %></td>
                                    <td><%= stock.notes || '-' %></td>
                                    <td class="no-print">
                                        <div class="btn-group">
                                            <% if (stock.available_shares > 0) { %>
                                                <button type="button" class="btn btn-danger btn-sm" 
                                                        onclick="openSellModal('<%= stock.id %>', '<%= stock.symbol %>', <%= stock.available_shares %>, <%= stock.current_price %>)">
                                                    <i class="bi bi-cash"></i>
                                                </button>
                                            <% } %>
                                            <button type="button" class="btn btn-primary btn-sm"
                                                    onclick="openUpdateModal('<%= stock.id %>', '<%= stock.symbol %>', <%= stock.shares %>, <%= stock.purchase_price %>, '<%= stock.purchase_date %>', '<%= stock.purchase_source || '' %>', '<%= stock.notes || '' %>')">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm"
                                                    onclick="confirmDelete('<%= stock.id %>', '<%= stock.symbol %>')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Add New Stock Form (Collapsible) -->
        <div class="collapse mb-4" id="addStockForm">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add New Stock</h5>
                    <form id="newStockForm">
                        <div class="mb-3">
                            <label for="symbol_search" class="form-label">Search Stock</label>
                            <div class="search-container">
                                <input type="text" 
                                       class="form-control" 
                                       id="symbol_search" 
                                       placeholder="Enter company name or symbol..."
                                       autocomplete="off"
                                       required>
                                <input type="hidden" id="selected_symbol" name="symbol" required>
                                <div id="search_results" class="search-results"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="shares" class="form-label">Number of Shares</label>
                            <input type="number" class="form-control" id="shares" name="shares" required min="1" step="1">
                        </div>
                        <div class="mb-3">
                            <label for="purchase_price" class="form-label">Purchase Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="purchase_price" name="purchase_price" required min="0.01" step="0.01">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="purchase_date" class="form-label">Purchase Date</label>
                            <input type="date" class="form-control" id="purchase_date" name="purchase_date" required>
                        </div>
                        <div class="mb-3">
                            <label for="purchase_source" class="form-label">Purchase Source</label>
                            <input type="text" class="form-control" id="purchase_source" name="purchase_source">
                        </div>
                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Stock
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Update Modal -->
        <div class="modal fade" id="updateModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Update Stock</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form id="updateForm" method="POST">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Stock Symbol</label>
                                <input type="text" class="form-control" id="updateStockSymbol" readonly>
                            </div>
                            <div class="mb-3">
                                <label for="update_shares" class="form-label">Number of Shares</label>
                                <input type="number" class="form-control" id="update_shares" name="shares" 
                                       min="1" step="1" required>
                            </div>
                            <div class="mb-3">
                                <label for="update_purchase_price" class="form-label">Purchase Price Per Share</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="update_purchase_price" 
                                           name="purchase_price" min="0.01" step="0.01" required>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="update_purchase_date" class="form-label">Purchase Date</label>
                                <input type="date" class="form-control" id="update_purchase_date" 
                                       name="purchase_date" required>
                            </div>
                            <div class="mb-3">
                                <label for="update_purchase_source" class="form-label">Purchase Source</label>
                                <input type="text" class="form-control" id="update_purchase_source" 
                                       name="purchase_source" placeholder="e.g., Broker, Exchange, Platform">
                            </div>
                            <div class="mb-3">
                                <label for="update_notes" class="form-label">Notes</label>
                                <textarea class="form-control" id="update_notes" name="notes" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Update Stock</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div class="modal fade" id="deleteModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete this stock? This action cannot be undone.
                        <p class="text-danger mt-2" id="deleteStockInfo"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <form id="deleteForm" method="POST" style="display: inline;">
                            <button type="submit" class="btn btn-danger">Delete Stock</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sell Modal -->
        <div class="modal fade" id="sellModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Sell Stock</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <form action="/sell-stock" method="POST">
                        <div class="modal-body">
                            <input type="hidden" id="sellStockId" name="stock_id">
                            <div class="mb-3">
                                <label class="form-label">Stock</label>
                                <input type="text" class="form-control" id="sellStockSymbol" readonly>
                            </div>
                            <div class="mb-3">
                                <label for="shares_sold" class="form-label">Number of Shares to Sell</label>
                                <input type="number" class="form-control" id="shares_sold" name="shares_sold" 
                                       min="1" step="1" required>
                            </div>
                            <div class="mb-3">
                                <label for="sell_price" class="form-label">Sell Price Per Share</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="sell_price" name="sell_price" 
                                           min="0.01" step="0.01" required>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="sell_date" class="form-label">Sell Date</label>
                                <input type="date" class="form-control" id="sell_date" 
                                       name="sell_date" value="<%= defaultDate %>" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-danger">Sell Stock</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const symbolSearch = document.getElementById('symbol_search');
                const searchResults = document.getElementById('search_results');
                const selectedSymbol = document.getElementById('selected_symbol');
                let searchTimeout;

                symbolSearch.addEventListener('input', function(e) {
                    clearTimeout(searchTimeout);
                    const query = e.target.value.trim();
                    
                    if (query.length < 1) {
                        searchResults.style.display = 'none';
                        selectedSymbol.value = '';
                        return;
                    }
                    
                    searchTimeout = setTimeout(async () => {
                        try {
                            const response = await fetch(`/api/search-stocks?q=${encodeURIComponent(query)}`);
                            if (!response.ok) throw new Error('Search failed');
                            
                            const data = await response.json();
                            
                            if (data.length === 0) {
                                searchResults.innerHTML = '<div class="search-result-item">No results found</div>';
                            } else {
                                searchResults.innerHTML = data.map(stock => `
                                    <div class="search-result-item" data-symbol="${stock.symbol}">
                                        <div class="stock-info">
                                            <span class="stock-symbol">${stock.symbol}</span>
                                            <span class="stock-name">${stock.name || ''}</span>
                                        </div>
                                        <span class="stock-exchange">${stock.exchange}</span>
                                    </div>
                                `).join('');
                            }
                            
                            searchResults.style.display = 'block';
                            
                            // Add click handlers
                            document.querySelectorAll('.search-result-item').forEach(item => {
                                if (item.dataset.symbol) {
                                    item.addEventListener('click', function() {
                                        const symbol = this.dataset.symbol;
                                        symbolSearch.value = symbol;
                                        selectedSymbol.value = symbol;
                                        searchResults.style.display = 'none';
                                        
                                        // Get current stock price
                                        fetch(`/api/stock-price?symbol=${symbol}`)
                                            .then(response => response.json())
                                            .then(data => {
                                                if (data.price) {
                                                    document.getElementById('purchase_price').value = data.price.toFixed(2);
                                                }
                                            })
                                            .catch(console.error);
                                    });
                                }
                            });
                        } catch (error) {
                            console.error('Search error:', error);
                            searchResults.innerHTML = '<div class="search-result-item">Error searching stocks</div>';
                        }
                    }, 300);
                });

                // Hide search results when clicking outside
                document.addEventListener('click', function(e) {
                    if (!symbolSearch.contains(e.target) && !searchResults.contains(e.target)) {
                        searchResults.style.display = 'none';
                    }
                });

                // Set default date to today
                document.getElementById('purchase_date').valueAsDate = new Date();

                // Form submission
                document.getElementById('newStockForm').addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        symbol: document.getElementById('selected_symbol').value,
                        shares: parseInt(document.getElementById('shares').value),
                        purchase_price: parseFloat(document.getElementById('purchase_price').value),
                        purchase_date: document.getElementById('purchase_date').value,
                        purchase_source: document.getElementById('purchase_source').value,
                        notes: document.getElementById('notes').value
                    };

                    try {
                        const response = await fetch('/api/stocks', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formData)
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to add stock');
                        }

                        // Clear form and collapse it
                        this.reset();
                        document.getElementById('selected_symbol').value = '';
                        document.getElementById('purchase_date').valueAsDate = new Date();
                        bootstrap.Collapse.getInstance(document.getElementById('addStockForm')).hide();
                        
                        // Reload page to show new stock
                        window.location.reload();
                    } catch (error) {
                        console.error('Error adding stock:', error);
                        alert(error.message || 'Failed to add stock. Please try again.');
                    }
                });

                // Sell Modal Functions
                const sellModal = new bootstrap.Modal(document.getElementById('sellModal'));
                
                function openSellModal(stockId, symbol, availableShares, currentPrice) {
                    document.getElementById('sellStockId').value = stockId;
                    document.getElementById('sellStockSymbol').value = symbol;
                    document.getElementById('shares_sold').max = availableShares;
                    document.getElementById('sell_price').value = currentPrice;
                    sellModal.show();
                }

                // Update Modal Functions
                const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
                
                function openUpdateModal(id, symbol, shares, purchasePrice, purchaseDate, purchaseSource, notes) {
                    document.getElementById('updateStockSymbol').value = symbol;
                    document.getElementById('update_shares').value = shares;
                    document.getElementById('update_purchase_price').value = purchasePrice;
                    document.getElementById('update_purchase_date').value = purchaseDate;
                    document.getElementById('update_purchase_source').value = purchaseSource;
                    document.getElementById('update_notes').value = notes;
                    document.getElementById('updateForm').action = `/update-stock/${id}`;
                    updateModal.show();
                }

                // Delete Modal Functions
                const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                
                function confirmDelete(id, symbol) {
                    document.getElementById('deleteStockInfo').textContent = `Stock: ${symbol}`;
                    document.getElementById('deleteForm').action = `/delete-stock/${id}`;
                    deleteModal.show();
                }

                // Table Sorting
                document.addEventListener('DOMContentLoaded', function() {
                    const table = document.getElementById('stocksTable');
                    const headers = table.querySelectorAll('th.sortable');
                    let currentSort = { column: null, direction: 'asc' };

                    headers.forEach(header => {
                        header.addEventListener('click', () => {
                            const column = header.dataset.sort;
                            const direction = currentSort.column === column && currentSort.direction === 'asc' ? 'desc' : 'asc';
                            
                            // Reset all headers
                            headers.forEach(h => {
                                h.querySelector('.sort-icon').className = 'bi bi-arrow-down-up sort-icon';
                            });

                            // Update sort icon
                            header.querySelector('.sort-icon').className = `bi bi-arrow-${direction === 'asc' ? 'up' : 'down'} sort-icon`;

                            // Sort the table
                            const tbody = table.querySelector('tbody');
                            const rows = Array.from(tbody.querySelectorAll('tr'));
                            
                            rows.sort((a, b) => {
                                let aVal = a.children[Array.from(headers).indexOf(header)].textContent.trim();
                                let bVal = b.children[Array.from(headers).indexOf(header)].textContent.trim();

                                // Handle currency values
                                if (aVal.startsWith('$')) {
                                    aVal = parseFloat(aVal.replace(/[$,]/g, ''));
                                    bVal = parseFloat(bVal.replace(/[$,]/g, ''));
                                }
                                // Handle numeric values
                                else if (!isNaN(aVal)) {
                                    aVal = parseFloat(aVal);
                                    bVal = parseFloat(bVal);
                                }
                                // Handle date values
                                else if (column === 'purchase_date') {
                                    aVal = new Date(aVal);
                                    bVal = new Date(bVal);
                                }

                                if (direction === 'asc') {
                                    return aVal > bVal ? 1 : -1;
                                } else {
                                    return aVal < bVal ? 1 : -1;
                                }
                            });

                            // Update the table
                            tbody.innerHTML = '';
                            rows.forEach(row => tbody.appendChild(row));

                            currentSort = { column, direction };
                        });
                    });
                });
            });
        </script>
    </body>
</html>
